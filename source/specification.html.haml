%h1 Specification and Interpretation

This is an informal specification of the JSON-ROA extension and
how clients should interpret and use it.

%h2 Content-Type 

%code application/json-roa+json

%h2  The JSON-ROA Object

.row
  .col-md-6
    :markdown 
      A minimal valid JSON-ROA extension is introduced with `_json-roa`. It
      must contain the key `version` where the value must be formatted
      according to [Semantic Versioning][].

      It may further contain the keys `relations`, `collection`, `name`, and
      `self-relation`. See [Relations](#relation), [Colletion](#collection),
      and [Relation](#relation) for the specification of the corresponding
      values.

        [Semantic Versioning]: http://semver.org/
  .col-md-6
    :code 
      # lang: json
      { "_json-roa": { "version" : "0.0.0-beta.0+20141126" }
        , "x": "some other data"
        , "y": 42
        , "z": false }
.row
  .col-md-6
    If the top level container is an array the JSON-ROA extension is located in the first position. 
  .col-md-6
    :code 
      # lang: json
      [ {"_json-roa":
          { "version" : "0.0.0-beta.0+20141126" } }
        , 42 ]
-

%section#relations
  %h3 The Relations Object

  .row
    .col-md-6
      :markdown 
        Relations is an object where the keys are _relation-identifiers_ and each
        corresponding value is a [relation](#relation) object.

    .col-md-6
      :code 
        # lang: json
        { "_json-roa":
          { "version" : "0.0.0-beta.0+20141126"
          , "relations": 
              { "t42" : 
                { "href" : "/task/42"} }}}
-

%section#relation-identifier
  %h3 
    Context and Interpretation of the Relation-Identifier
  .row
    .col-md-6
      :markdown 
        The **identifier of a relation** is meant to be used in clients to dereference
        the relation object and in particular use the `href`-value within. 

        The example is taken from working with the [JSON-ROA Ruby Client](https://github.com/json-roa/json-roa_ruby-client).
        A resource `execution` has a relation with the identifier `tasks` which is
        used to perform an http GET request on URL given by the href-value.
    .col-md-6
      :code 
        # lang: ruby
        execution.relation('tasks').get()
  -




%section#relation
  %h3 The Relation Object

  .row
    .col-md-6
      :markdown 
        A relation is an object which must contain the key `href`. It may contain the
        keys `name`, `methods`, and `relations`.
    .col-md-6
      :code 
        # lang: json
        { "name": "Tasks"
          "href": "/tasks/" }
  -

  %section#relation
    %h4 The Href Value
    .row
      .col-md-6
        :markdown 

          The value of `href` is a string and represents an URI according to
          [RFC3986 Uniform Resource Identifier][]. It must at least contain a path
          segment. The values before the path segment are inferred form the
          current resource if not given. The URI may be templated according to
          [RFC6570 URI Template][].

            [RFC3986 Uniform Resource Identifier]: https://tools.ietf.org/html/rfc3986
            [RFC6570 URI Template]: https://tools.ietf.org/html/rfc6570

      .col-md-6
        :code 
          # lang: uri
          http://some-service.com/tasks/ 
        :code 
          # lang: uri
          /task/{id}
    -


  %section#relation-name
    %h4 Context and Interpretation of the Name Value
    .row
      .col-md-6
        :markdown 
          The name should not be used for technical purposes. 
          The name is used, e.g. by [The JSON-ROA Browser]() to give a readable and
          understandable output for the human user. 

  %section#relation-methods
    %h4 The Methods Object 
    .row
      .col-md-6
        :markdown 
          The methods object may contain the keys `get`, `put`, `patch`, `post`, and `delete`. 
          Each value is an empty object at this time. 

          Clients should interpret the available HTTP-method to act on the
          given url respectively resource they address. 

          If the no `methods` are  given, clients should assume that 
          `get` and only `get` is available. 


      .col-md-6
        :code 
          # lang: json
          { "name": "Tasks"
          , "href": "/tasks/" 
          , "methods": 
            { "get": {} 
            , "post": {}}}
        :code 
          # lang: json
          { "methods": 
            { "get": {} }}
    -


%section#collection
  %h3 The Collection Object

  %em TODO 
